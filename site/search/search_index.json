{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pycon Tinkering Track","text":"<p>Welcome to the Pycon Tinkering Track 2023, Let's get started with the basics of electronics</p>"},{"location":"about/","title":"The page for the ultrasonic sensor","text":""},{"location":"breadboard/","title":"Introduction to a breadboard","text":"<p>A breadboard is like a special tool that helps you build and test electronic circuits without soldering or making permanent connections. It's kind of like a puzzle board for electronics!</p> <p>Holes and Rows: A breadboard has lots of tiny holes in it, and these holes are organized into rows. Each row usually has five holes. The rows are connected inside the breadboard, which means the holes in the same row are connected to each other.</p> <p>Power Rails: On the sides of the breadboard, there are usually two long rows. One is usually labeled \"+\" (positive) and the other \"-\" (negative). These are like the power sources for your circuit. You can connect your components to these rails to get electricity.</p> <p>Components: You can add electronic components like resistors, LEDs, switches, and wires into the holes on the breadboard. These components have metal legs called leads that you insert into the holes.</p> <p>Connections: The cool thing about a breadboard is that when you plug a component into a hole, it's connected to the other holes in the same row. So you can easily connect different parts of your circuit just by plugging them into the right holes on the breadboard.</p> <p>Testing: Once you've connected all your components on the breadboard, you can use it to test your circuit. If something doesn't work, you can easily move the components around or change the connections without damaging anything. It's like building with LEGO \u2013 if you don't like how it looks or works, you can change it!</p> <p>No Soldering: The best part is that you don't need to use soldering (melting metal to connect parts) with a breadboard. This makes it safe and easy to experiment with electronics, especially for beginners.</p> <p>So, in simple terms, a breadboard is like a playground for electronic parts. It helps you connect them together to make cool electronic projects without the need for any special tools or skills. It's a great way to learn about how electronics work and to have fun building your own gadgets!</p>"},{"location":"circuits/","title":"Introduction to circuits","text":""},{"location":"circuits/#whats-a-circuit","title":"What's a Circuit?","text":"<p>A circuit is a closed loop that allows electricity to move in a circle. Imagine it as a race track where tiny electric friends speed around. They start from one place, zoom around the track, and end up back where they started. This endless loop is what makes our gadgets and gizmos work!</p>"},{"location":"circuits/#parts-of-a-circuit","title":"Parts of a Circuit","text":"<p>A typical circuit has a few important parts:</p> <ul> <li> <p>Power Source: This is like the heart of the circuit. It provides the electricity, like a battery or a wall socket.</p> </li> <li> <p>Wires: Wires are like the roads or paths for our electric friends. They carry the electricity from one place to another.</p> </li> <li> <p>Components: These are the cool parts that use electricity to do something. It can be an LED that lights up, a motor that spins, or a buzzer that makes noise.</p> </li> <li> <p>Switches: Switches are like traffic lights. They can stop or start the flow of electricity. Flip a switch, and the circuit can turn on or off.</p> </li> </ul>"},{"location":"circuits/#circuits-are-everywhere","title":"Circuits Are Everywhere!","text":"<p>Circuits are like the hidden heroes of the tech world. They're in your video games, toys, phones, and even the lights in your home. Now that you know how circuits work, you can start building your own amazing gadgets!</p> <p>Remember, circuits are all about letting electricity flow and do fun things. So, grab your wires, batteries, and components, and start creating your electrifying inventions. The world of circuits is waiting for your genius to shine!</p>"},{"location":"digital_analog/","title":"Digital and analog values","text":"<p>When working with circuits and micro-controllers you can get two types of values digital values and analog values </p> <ul> <li> <p>Digital Values are like switches that can be either ON or OFF, like a light switch. Imagine you have a super cool robot. When you tell it to move, it can only understand two commands: \"Go\" or \"Stop.\" There's no in-between. That's how digital things work. It's either one thing or the other, like a computer understanding \"yes\" or \"no.\"</p> </li> <li> <p>Analog Values, on the other hand, are more like a dimmer switch for a light. Instead of just \"On\" or \"Off,\" you can make the light any level of brightness in between. So, if you want the light to be just a little bit bright or really, really bright, you can do that. Analog values are like a range of options, not just two choices.</p> </li> <li> <p>To give you an example, think about a volume control on a music player:</p> <ul> <li> <p>Digital Volume: If it's digital, you might have just a few levels, like \"Volume 1,\" \"Volume 2,\" or \"Volume 3.\" You can't make it a tiny bit louder than \"Volume 1\" or a little softer than \"Volume 2.\" It jumps from one level to another.</p> </li> <li> <p>Analog Volume: If it's analog, you can smoothly turn the knob to make the sound exactly as loud as you want. You can have it a tiny bit louder or a little bit softer, anywhere in between. It's like having a lot more choices and being able to find the perfect volume.</p> </li> </ul> </li> <li> <p>So, in a nutshell, digital values are like having only a few options, while analog values give you a whole range of choices, just like switching a light on and off vs. dimming it to your preferred level.</p> </li> </ul>"},{"location":"electronics_basics/","title":"Introduction to Electronics","text":"<p>Welcome to the world of electronics! In this workshop, we'll explore how electricity works and have loads of fun creating cool projects with it.</p>"},{"location":"electronics_basics/#what-is-electronics","title":"What is Electronics?","text":"<p>Electronics is like magic with electricity. It's all about making things light up, move, and play music using something called \"electricity.\" Imagine it as the power that makes your toys work and your TV show up on the screen!</p>"},{"location":"electronics_basics/#understanding-the-basics","title":"Understanding the Basics","text":""},{"location":"electronics_basics/#voltage-current-and-resistance","title":"Voltage, Current, and Resistance","text":"<ul> <li> <p>Voltage (V): Think of voltage as the push that makes electricity flow. It's what gets everything started, like a gust of wind starting a race.</p> </li> <li> <p>Current (I): Current is like a stream of tiny particles (we'll call them \"electric friends\") that move through wires. The more electric friends, the stronger the current.</p> </li> <li> <p>Resistance (R): Resistance is like a traffic jam for our electric friends. It slows them down. Some parts in our circuits help slow things down so we can control what happens.</p> </li> </ul>"},{"location":"electronics_basics/#electrical-circuits","title":"Electrical Circuits","text":"<p>An electrical circuit is like a path for our electric friends to travel. Imagine it as a secret tunnel they follow. We use things like batteries and wires to make sure our electric friends have a safe journey. And we can turn the tunnel on or off with switches!</p>"},{"location":"electronics_basics/#ohms-law","title":"Ohm's Law","text":"<p>Ohm's Law is a special rule in electronics. It helps us figure out how to use electricity to make things work just right. It's like following a recipe when you bake cookies. It says how much voltage, current, and resistance we need to make our projects awesome!</p> <p>Ohm's Law says: Voltage (V) = Current (I) \u00d7 Resistance (R)</p> <p>Imagine it's like using blocks to build a tower. Voltage is how tall you want the tower (like a skyscraper or a little house). Current is how many blocks you stack on top of each other, and Resistance is how strong each block is.</p> <p>So, if you want a super tall tower (high voltage), you can use lots of blocks (high current) or make each block really strong (high resistance).</p> <p>With Ohm's Law, we can make sure our projects work perfectly and safely. It's like being a super-electrician!</p> <p>Get ready to have a blast learning about electricity and making fantastic projects. We won't get too technical \u2013 we'll focus on making cool stuff with the power of electricity. Let's dive in and have some electrifying fun!</p>"},{"location":"electronics_basics/#what-is-5v","title":"What is 5V?","text":"<ul> <li> <p>5V stands for 5 volts, and it's like the \"push\" or \"power\" that makes electricity move in a circuit. Imagine it as a gentle, steady breeze that helps a paper airplane (your electricity) fly through the air (your circuit).</p> </li> <li> <p>Voltage (5V): Think of voltage like the strength of the breeze. The higher the voltage, the stronger the push. 5V is a safe and common amount of voltage used in many electronic devices.</p> </li> <li>Current: Now, imagine current as the number of paper airplanes flying in the breeze. It's the flow of electricity. When you have a higher voltage (stronger breeze), you can have more current (more paper airplanes flying).</li> <li>Resistance: Resistance is like obstacles in the path of your paper airplanes. It makes them slow down or stop. Think of it as things in your circuit that make it harder for electricity to flow.</li> </ul>"},{"location":"electronics_basics/#what-is-ground-gnd","title":"What is Ground (GND)?","text":"<ul> <li> <p>Ground, often labeled as GND, is like the \"home\" or \"safe zone\" for your electricity in a circuit. Imagine it as the ground beneath your feet. It's where electricity goes to rest when it's done its job.</p> </li> <li> <p>Voltage (0V): Ground has a voltage of 0V, which means there's no push or power here. It's like calm, still air. When you connect something to ground, you're saying, \"Okay, electricity, you can relax here.\"</p> </li> <li> <p>Current: Current can flow from a higher voltage (like 5V) to ground (0V). It's like paper airplanes returning to the ground after their flight. They're going from a higher place to a lower, calm place.</p> </li> <li> <p>Resistance: Ground usually has very low resistance, which means it's easy for electricity to flow to it. It's like having a smooth, clear path for your paper airplanes to land safely.</p> </li> </ul> <p>So, when you connect something to 5V, you're giving it the power to move, like the breeze helping a paper airplane fly. And when you connect it to ground, you're giving it a safe place to rest after its journey. These two things work together in your circuit to make everything run smoothly!</p>"},{"location":"led_light/","title":"Let's Explore LEDs and Light","text":""},{"location":"led_light/#what-is-an-led","title":"What is an LED?","text":"<p>An LED is like a tiny light that can shine when you give it electricity. It comes in different colors like red, green, and blue. Here's how it works:</p> <ul> <li> <p>Inside an LED, there are tiny parts that get really excited when you give them electricity. It's like they're jumping up and down at a fun party!</p> </li> <li> <p>When these excited parts calm down, they give away their excitement as light. It's like when you bounce a ball, and it comes back to you with energy \u2013 that's the light.</p> </li> <li> <p>Different LEDs have different materials inside, like different paint colors. That's why they can make different colors of light.</p> </li> </ul> <p>You can find LEDs in your gadgets and devices, making them light up with colorful magic!</p>"},{"location":"led_light/#what-is-light","title":"What is Light?","text":"<p>Light is like the bright stuff you see when you turn on a flashlight. It helps you see things around you and has some cool properties:</p> <ul> <li> <p>Light is super fast, zooming around so quickly that you can't even see it moving.</p> </li> <li> <p>It can be different colors, just like the colors of the rainbow \u2013 red, orange, yellow, green, blue, and more.</p> </li> <li> <p>Light can bounce off things, like a ball bouncing off a wall, or bend when you look at things through water in a pool.</p> </li> <li> <p>Raindrops can make light spread out into a beautiful rainbow with all the colors in it.</p> </li> </ul> <p>Light is what lets you explore the world and see all the amazing colors and sights around you. It's like nature's own magic show!</p> <p>Understanding LEDs and light helps scientists and engineers create cool things like colorful screens on your gadgets and flashy signs on the streets. It's like using the power of light to make our world more exciting!</p>"},{"location":"micro_controller/","title":"Let's Explore the Raspberry Pi Pico, Microcontrollers","text":"<p>Okay so now we're going to dive into the amazing world of microcontrollers using the Raspberry Pi Pico as our guide. Microcontrollers are like the brains of gadgets, and the Raspberry Pi Pico is a fantastic example of one. Hold it in your hands and let's discover its parts!</p>"},{"location":"micro_controller/#whats-a-microcontroller","title":"What's a Microcontroller?","text":"<p>A microcontroller (or MCU for short) is like a tiny computer that can do specific tasks. It's smart but not as powerful as your computer or tablet. Instead, it's perfect for controlling things in the real world.</p> <p>Here's a breakdown of the Raspberry Pi Pico, and I'll guide you to explore its parts:</p>"},{"location":"micro_controller/#front-side","title":"Front Side:","text":"<ul> <li> <p>LED Light: You'll see a tiny LED light. It's like a mini flashlight that tells you when the Pico is powered on.</p> </li> <li> <p>MicroUSB Port: This is where you connect a cable to talk to your computer. It's like the Pico's way of chatting with your computer.</p> </li> <li> <p>GPIO Pins: GPIO stands for General-Purpose Input/Output. These are like the Pico's arms and legs that let it interact with the world. We'll use these to connect our LED and other cool stuff!</p> </li> <li> <p>Boot Button: If you want to start fresh with new programs, press this button while plugging in the Pico to your computer.</p> </li> </ul>"},{"location":"micro_controller/#back-side","title":"Back Side:","text":"<ul> <li> <p>Memory Chip: This is where the Pico stores its programs and data. It's like the Pico's memory bank.</p> </li> <li> <p>Microcontroller Chip: The most important part! This chip is like the Pico's brain. It thinks and does all the tasks you tell it to.</p> </li> </ul> <p>You've just scratched the surface of the exciting world of microcontrollers! With more practice, you can make the Pico do all sorts of amazing things. Keep exploring and have fun building with your new friend, the Raspberry Pi Pico!</p>"},{"location":"oled_display/","title":"Oled display","text":"<pre><code>from machine import Pin, I2C\nfrom ssd1306 import SSD1306_I2C\nWIDTH =128 \nHEIGHT= 64\ni2c=I2C(0,scl=Pin(17),sda=Pin(16),freq=200000)\noled = SSD1306_I2C(WIDTH,HEIGHT,i2c)\nwhile True:\n    oled.fill(0)\n    oled.text(\"Hello Python\", 0, 0)\n    oled.show()\n</code></pre>"},{"location":"pwm/","title":"Pulse width modulation","text":"<ul> <li> <p>Pulse Width Modulation (PWM) is like a clever technique that makes a piezo buzzer play different musical notes by rapidly turning it on and off.</p> </li> <li> <p>Imagine you have a flashlight, but instead of giving a steady beam of light, you can make it flicker really fast. When you turn it on and off very quickly, it seems like it's glowing dimmer or brighter, even though it's just flickering. This is somewhat similar to what PWM does, but with electricity instead of light.</p> </li> <li> <p>Now, let's use PWM to make a piezo buzzer play music:</p> </li> <li> </li> <li> </li> <li> </li> </ul> <p>So, PWM is like a clever technique that tells the piezo buzzer when to vibrate and when to stop, very quickly, to create different musical notes. It's a smart way to make your buzzer sing songs without having to change the buzzer itself. Just like how the flickering flashlight tricks your eyes into thinking it's glowing differently, PWM tricks the buzzer into making different sounds!</p>"},{"location":"pwm/#turning-on-and-off","title":"Turning On and Off:","text":"<p>Instead of giving the buzzer a continuous flow of electricity (like keeping the flashlight fully on), we turn the electricity on and off rapidly. This   on-off pattern happens very, very quickly, much faster than you can see or hear.</p>"},{"location":"pwm/#controlling-the-notes","title":"Controlling the Notes:","text":"<p>By changing how long we keep the electricity on (the \"on\" time) and how long we keep it off (the \"off\" time), we can control the buzzer's vibrations. Remember, the buzzer vibrates to make sound. When we change the on-off times in a certain way, we can make it play different musical notes.</p>"},{"location":"pwm/#making-tunes","title":"Making Tunes:","text":"<p>To play a song, we create a specific pattern of on and off times for the buzzer. For example, a short \"on\" time followed by a short \"off\" time might make a high-pitched note, while a longer \"on\" time followed by a longer \"off\" time might make a lower-pitched note. By combining these patterns, we can make the buzzer play songs and melodies.</p>"},{"location":"safety_tip/","title":"Electronics Workshop Safety Guide","text":""},{"location":"safety_tip/#introduction","title":"Introduction","text":"<p>Welcome to The Tinkering space! Our main rule is to stay safe while having fun. We're working with small electronic stuff that won't blow up, but we still need to be careful.</p>"},{"location":"safety_tip/#general-safety-tips","title":"General Safety Tips","text":"<ul> <li> <p>Adults Around: Always have a grown-up or teacher with you.</p> </li> <li> <p>Clean Area: Keep your space neat and tidy so you don't trip or lose things.</p> </li> <li> <p>No Food or Drinks: Don't eat or drink while working with electronics.</p> </li> <li> <p>Clean Hands: Wash your hands before and after touching the electronics.</p> </li> <li> <p>Static Electricity: Touch something metal before handling electronics to avoid shocking them.</p> </li> <li> <p>Safety Glasses: Wear safety glasses to protect your eyes, especially when using hot tools.</p> </li> </ul>"},{"location":"safety_tip/#electrical-safety","title":"Electrical Safety","text":"<ul> <li> <p>Low Voltage: We're using a small amount of electricity (5V), but always be careful</p> </li> <li> <p>Unplug: Always unplug things before plugging them in or taking them apart.</p> </li> <li> <p>Check Stuff: Look at things closely before using them. Don't use anything broken.</p> </li> <li> <p>Watch How You Connect: Be sure to connect things the right way. Mixing it up can hurt the stuff. Make sure to connect wires according to the diagram that has been made </p> </li> </ul>"},{"location":"safety_tip/#avoiding-short-circuits","title":"Avoiding Short Circuits","text":"<ul> <li> <p>What's a Short Circuit?: A short circuit happens when 5v and ground wires touch each other , it leads to a path where the resistance is very low, this can lead to component damage</p> </li> <li> <p>Stay Apart: Make sure wires don't touch when they shouldn't.</p> </li> <li> <p>Use Tape: If wires are exposed, put tape on them to cover them up.</p> </li> <li> <p>Keep Metal Away: Don't let metal stuff near the electronics.</p> </li> </ul>"},{"location":"safety_tip/#handling-batteries","title":"Handling Batteries","text":"<ul> <li> <p>Battery Care: Be gentle with batteries. They can leak or break.</p> </li> <li> <p>Put Them Right: Make sure the + and - signs on batteries match up with what's in the gadget.</p> </li> <li> <p>Store Well: Keep batteries in a cool, dry place, and don't let them get too hot or cold.</p> </li> </ul>"},{"location":"safety_tip/#conclusion","title":"Conclusion","text":"<p>Remember, it's okay to make mistakes as you learn. Nothing bad will happen with our small 5V electronics, but we still want to be safe. If you're not sure about something, ask questions, and have fun exploring the world of electronics and programming!</p>"},{"location":"projects/blinky/","title":"Blinking the Built-in LED","text":""},{"location":"projects/blinky/#lets-make-the-built-in-led-on-the-raspberry-pi-pico-blink-on-and-off","title":"Let's Make the built-in LED on the Raspberry Pi Pico blink on and off.","text":"<p>The raspberry pi pico has an LED built right into it so you don't have to do build a circuit and can get started quickly </p>"},{"location":"projects/blinky/#instructions","title":"Instructions:","text":"<ul> <li>Insert the Raspberry Pi Pico into the breadboard.</li> <li>Step 1: Import Libraries</li> </ul> <pre><code>import machine\nimport utime\n</code></pre> <p>Think of these lines as telling the computer to get ready for some special tasks. We're bringing in two friends, machine and utime, to help us. machine will help us control the Raspberry Pi Pico, and utime will help us with time-related things.</p> <ul> <li>Step 2: Setting up the LED Pin</li> </ul> <pre><code>led = machine.Pin(25, machine.Pin.OUT)\n</code></pre> <p>Here, we're telling the Pico that we want to use one of its pins, called pin number 25, and we want to use it for \"OUT,\" which means we can control it to make it turn on or off. Imagine this as choosing a switch that controls a light bulb.</p> <ul> <li>Step 3: Creating a Loop</li> </ul> <pre><code>while True:\n</code></pre> <p>This line starts a loop, which is like a repeat button. It says, \"Keep doing the things inside this loop forever.\"</p> <ul> <li>Step 4: Toggling the LED</li> </ul> <pre><code>    led.toggle()\n</code></pre> <p>Inside the loop, we're telling the Pico to switch the LED on if it's off or off if it's on. It's like playing with a light switch \u2013 turning the light on and off.  Here the led is an object , python has objects similar to how we have </p> <ul> <li>Step 5: Sleeping (Waiting) for a Second</li> </ul> <pre><code>    utime.sleep(1)\n</code></pre> <p>After we've switched the LED, we want to wait for 1 second before doing it again. This line is like telling the Pico to take a little nap for 1 second before repeating the loop. This is because if we dont tell the pico to take a nap , it will blink the LED so fast that we wont be able to see it </p> <p>And that's it! The code keeps making the LED blink on and off forever until you stop it.</p> <p>You've just created a simple program to control the Raspberry Pi Pico's built-in LED. </p>"},{"location":"projects/button/","title":"Button-controlled Built-in LED","text":""},{"location":"projects/button/#objective-control-the-built-in-led-with-a-button-using-the-raspberry-pi-pico","title":"Objective: Control the built-in LED with a button using the Raspberry Pi Pico.","text":""},{"location":"projects/button/#introduction-to-buttons","title":"Introduction to buttons","text":"<p>First, let's talk about what a button is. A button is like a tiny switch that you can press with your finger. When you press it, it can make something happen, like turning on a light or starting a game on your computer. There are some special parts inside a button that complete a circuit and complete the path for our electric friends to flow through. It's like a magic doorbell for electronics!</p>"},{"location":"projects/button/#pull-up-and-pull-down","title":"Pull up and pull down","text":"<p>Imagine you have a light switch in your room. When you turn the switch off, the light goes off, and when you turn it on, the light comes on, right? Now, think of electronic devices like your computer or phone. Inside them, there are tiny switches, just like your room's light switch. These switches help control how electricity flows.</p> <p>Pull-up and pull-down resistors are like special helpers for these tiny switches inside electronics. They make sure that the switches have a definite state when you're not touching them. Let me explain how they work:</p> <ol> <li>Pull-Up Resistor:</li> </ol> <p>Think of a pull-up resistor like a tiny, invisible hand that gently pulls a switch towards turning it on (just like turning on your room's light). So, when you're not pressing the button or switch, the pull-up resistor makes sure it stays in the \"on\" state. </p> <ol> <li>Pull-Down Resistor:</li> </ol> <p>Now, imagine a pull-down resistor as another tiny, invisible hand, but this time it gently pushes the switch toward turning it off (like turning off your room's light). So, when you're not pressing the button or switch, the pull-down resistor makes sure it stays in the \"off\" state.</p> <p>In electronics, these resistors help prevent something called \"floating.\" Floating is when the switch is in an uncertain state, like not knowing if your room's light is on or off when you haven't touched the switch. Pull-up and pull-down resistors make sure the switch has a clear and definite state when you're not using it.</p> <p>So, pull-up and pull-down resistors are like little helpers that make sure electronic switches know whether to be \"on\" or \"off\" when you're not actively using them. They help keep things stable and prevent confusion in electronic circuits!</p>"},{"location":"projects/button/#instructions","title":"Instructions:","text":"<ul> <li>Set up the Raspberry Pi Pico on the breadboard.</li> <li>Connect one side of the push button to a GPIO pin (e.g., GPIO14) on the Pico.</li> <li>Connect the other side of the push button to GND (ground) on the Pico.</li> <li> <p>Now lets write a Python program to read whether the buttton is pressed or not</p> </li> <li> <p>Step 1: Import Libraries</p> </li> </ul> <pre><code>import machine\nimport utime\n</code></pre> <p>We import the familiar libraries , these will help us connect to and control the pico * Step 2: Now  we tell the pico that the button is connected to the GPIO pin 14 , notice how this time we are telling the Pico that it is an input device , remember the LED is an output device but an button is an input device.</p> <pre><code>button = Pin(14, Pin.IN, Pin.PULL_DOWN)\n</code></pre> <ul> <li>Now we will run the loop , and keep reading the value of the button , remember <code>0</code> means its off and <code>1</code> means the button is on</li> </ul> <pre><code>while True:\n    print(button.value())\n    utime.sleep(0.1)\n</code></pre>"},{"location":"projects/button/#what-is-an-if-condition-in-python","title":"What is an \"if\" Condition in Python:","text":"<p>Think of an \"if\" condition like a decision maker in your code. It's a way for your computer to make choices and take different actions based on certain conditions. Here's how it works in simple terms:</p> <p>Imagine you have a robot friend, and you give them a rule: \"If it's raining, take an umbrella. If it's not raining, leave the umbrella at home.\" Your robot friend follows this rule, and it's similar to how an \"if\" condition works in Python.</p> <p>In Python, you can say something like this: \"If a button is pressed, turn on the LED. If the button is not pressed, turn off the LED.\" The computer checks the button's condition (pressed or not pressed) and acts accordingly. Imagine you have a magical button, and when you press it, a secret door opens. You want to write a program that controls a magical light (an LED) with this button.</p> <p>Step 2 - Write the Code: Here's what your code might look like:</p> <pre><code>from machine import Pin\nimport time\n\n# Create a button object and tell the computer where it's connected (e.g., pin 14)\nbutton = Pin(14, Pin.IN, Pin.PULL_UP)\nled = Pin(25, Pin.OUT)\n\nwhile True:\n    if button.value() == 0:  # If the button is pressed\n        led.value(1)  # Turn on the LED\n    else:\n        led.value(0)  # If the button is not pressed, turn off the LED\n    time.sleep(0.1)  # Wait for a moment\n</code></pre> <p>Step 3 - Try It Out: When you run this program, the LED will light up when you press the button and turn off when you release it. It's like controlling a magical light with your button!</p> <p>Step 4 - Explore and Experiment: Now, you can start changing the code and making your own magical button adventures. Maybe the LED could change colors or blink in a pattern when you press the button. The \"if\" condition helps you make your computer do exciting things based on your button's actions!</p>"},{"location":"projects/ldr/","title":"Building a night light","text":""},{"location":"projects/ldr/#what-is-an-ldr","title":"What is an LDR?","text":"<p>An LDR is a special kind of electronic component called a resistor. A resistor limits the flow of electricity in a circuit. Most resistors have a fixed resistance, meaning they always limit the flow by the same amount. But an LDR is different - its resistance changes depending on how much light shines on it. That's why it's called a light dependent resistor!</p>"},{"location":"projects/ldr/#how-does-an-ldr-work","title":"How does an LDR work?","text":"<p>An LDR is made of a material that increases its resistance when light shines on it. So when it's dark, the LDR has a low resistance and allows electricity to flow easily. But when light shines on it, the resistance increases and blocks more of the electric current.</p> <p>It's like a water hose - when you squeeze the hose, less water can flow through. More light makes the LDR \"squeeze\" the electric flow to limit it.</p>"},{"location":"projects/ldr/#what-is-ldr-used-for","title":"What is LDR used for?","text":"<p>The changing resistance of the LDR when light shines on it allows it to be used in all kinds of fun circuits and devices!</p> <p>For example, you could use an LDR to make a nightlight that turns on automatically when it gets dark. Or you could use it to create an alarm that goes off if a light is turned on. Lots of electronic gadgets use LDRs to detect light levels and react.</p> <p>So okay so now lets build this project out </p>"},{"location":"projects/ldr/#building-the-project","title":"Building the project","text":"<p>Connecting an LDR to a Raspberry Pi Pico First, we need to connect the LDR to the Raspberry Pi Pico.</p>"},{"location":"projects/ldr/#connect-ldr-to-pin-gp15","title":"Connect LDR to pin GP15","text":"<pre><code>ldr = machine.ADC(pin=15)\n</code></pre> <p>This line sets up the LDR so that we can read its analog voltage value on pin GP15 of the Pico.</p>"},{"location":"projects/ldr/#well-the-use-the-led-connected-to-the-raspberry-pi-pico-on-pin-25","title":"We'll the Use the LED connected to the raspberry pi pico on pin 25","text":"<pre><code>led = machine.Pin(25, machine.Pin.OUT)\n</code></pre> <p>Reading the LDR Now we can read the analog voltage from the LDR:</p>"},{"location":"projects/ldr/#read-analog-voltage-from-ldr","title":"Read analog voltage from LDR","text":"<p>ldr_value = ldr.read_u16() This will give us a number between 0-65535 depending on how much light is hitting the LDR.</p>"},{"location":"projects/ldr/#controlling-the-led","title":"Controlling the LED","text":"<p>We'll turn the LED on if it's dark (LDR voltage is low):</p> <pre><code>if ldr_value &lt; 1000:\n  led.value(1) # Turn LED on\nAnd off if it's bright (LDR voltage is high):\nelse:\n  led.value(0) # Turn LED off\n</code></pre> <p>So by reading the LDR and controlling the LED, we can make a simple automatic nightlight!</p>"},{"location":"projects/potentiometer/","title":"What is a potentiometer","text":"<ul> <li> <p>Okay, imagine you have a special knob on a toy or a radio. This knob lets you control how loud the music is or how bright the light is. You can turn it one way to make the music louder or the light brighter, and the other way to make it softer or dimmer. This special knob is like a potentiometer.</p> </li> <li> <p>But what's inside this knob that makes it work? Well, inside, there's a twisty wire or track, like a tiny path. When you turn the knob, a little metal thingy with a pointy end, like a tiny robot finger, moves along this path.</p> </li> <li> <p>Here's where the magic happens: depending on where that metal finger is on the path, it changes how much electricity can flow through it. When the finger is at one end, very little electricity can get through, so the music is quiet or the light is dim. When the finger is at the other end, lots of electricity can flow, so the music is loud or the light is bright.</p> </li> <li> <p>So, a potentiometer is like a magical knob that helps you control things like volume or brightness by changing how much electricity can go through it when you turn it. It's like a secret volume button for your toys and gadgets!</p> </li> <li> <p>Now lets get started and connect our potentiometer to our Pico and try to read the value of the potentiometer </p> </li> <li> <p>Lets start by writing code </p> </li> </ul> <pre><code>from machine import Pin,PWM\nimport utime\nimport random\n\nanalog_value = machine.ADC(28)\nif __name__ == \"__main__\":\n    while True:\n        # range of random numbers\n        value = analog_value.read_u16()\n</code></pre> <p>```</p>"},{"location":"projects/thermin/","title":"Build a musical thermin","text":"<ul> <li>A sound thermin is a device which plays sounds based on how far the object is from the instrument </li> <li> <p>In this project , we will be using an ultrasonic sensor to control the piezo buzzer to make a sound thermin</p> </li> <li> <p>Hints : Start with looking at the code for the piezo buzzer , remember how we used a potentiometer to send values to the buzzer, Next try to remember how we used the ultrasonic sensor to read distance values , all you need to code is to take values from the ultrasonic sensor as we just did and apply those values to the piezo buzzer to build your musical thermin.</p> </li> </ul>"},{"location":"projects/traffic_light/","title":"Having fun with more than one LED","text":"<ul> <li>Now Let's pull out the traffic light and start having fun with more LEDS </li> <li>Start with placing the traffic light into to the breadboard </li> <li>Now connect the pin labelled GND on the traffic light to the ground rail on the breadboard</li> <li>Now connect the rest of the pins to pin numbers 31, 32 and 34 on the PICO</li> </ul>"},{"location":"projects/traffic_light/#building-on-your-own","title":"Building on your own","text":"<ul> <li>Now let's refer to the old guide that we used to blink an LED and try to blink the RED LED on our own , now change the code to blink the green and then the yellow LED </li> </ul> <p>Hints : Remember the code we just implemented for blinking the LED on the raspberry pi pico , in this case we are just blinking an LED connected to the Pico , well this is a similar LED just connected to a different Pin !!</p>"},{"location":"projects/traffic_light/#now-lets-have-fun-with-more-leds","title":"Now let's have fun with more LEDs","text":"<ul> <li>Blink all the three LEDs together</li> <li>Turn on Red , make the Red turn off , now turn on the yellow , turn it off and then turn on the green , turn it off . Repeat</li> </ul>"},{"location":"projects/oled_display/how_oled_works/","title":"How oled works","text":"<p>OLEDs (Organic Light-Emitting Diodes) are like a tiny city of super tiny light bulbs. Just like regular LEDs, these bulbs can produce light. But here's the cool part: in an OLED, these tiny light bulbs are even smaller and special because they can make their own light without needing a big backlight.</p> <p>Inside each of these tiny OLED light bulbs, there are tiny organic molecules (that's why it's called \"Organic\"). When you give them a little bit of electric power, they get excited and start to glow. It's like when you're really happy, and you can't help but smile \u2013 these molecules can't help but glow when they're excited.</p> <p>Now, the amazing thing about OLEDs is that they can be turned on and off individually. So, if you want a part of your screen to show something, only those tiny bulbs in that area will light up. This makes OLED displays super energy-efficient and gives them really bright, vibrant colors.</p> <p>Comparison with LED Displays:</p> <p>Now, let's compare OLED displays to LED displays:</p> <ul> <li> <p>LED Displays: In LED displays (Light-Emitting Diode displays), there are also tiny light bulbs, just like in OLEDs. However, LED displays need a big backlight behind them to make the tiny bulbs light up. It's like having a big spotlight behind the screen. This means LED displays use more electricity to work because they're lighting up the whole screen all the time.</p> </li> <li> <p>OLED Displays: In OLED displays, each tiny bulb can make its own light without needing a big spotlight behind it. This is why OLEDs are more energy-efficient and can show really deep blacks because they can turn off the bulbs completely when they're not needed. It's like having lots of tiny flashlights that can be turned on and off as you need them.</p> </li> </ul> <p>So, to sum it up, OLEDs are like a city of tiny light bulbs that can each turn on and off to make pictures and colors on your display. And they're so small and efficient that they don't need a big light source behind them, unlike regular LED displays. Cool, right?</p>"},{"location":"projects/oled_display/i2c/","title":"I2c","text":"<p>How I2C Protocol Works:</p> <p>The I2C (Inter-Integrated Circuit) protocol is a way for different electronic devices to talk to each other using just two wires (SDA and SCL). It's like a special language they use to have conversations.</p> <p>Here's how it works:</p> <ol> <li> <p>Start Signal: One device, let's call it the \"master\" (like a leader in a conversation), sends a start signal on the SDA line to let everyone know that it wants to talk.</p> </li> <li> <p>Addressing: The master then says who it wants to talk to by sending their address on the SDA line. It's like calling someone by their name.</p> </li> <li> <p>Data Transfer: After addressing, the master and the other device (called the \"slave\") can start sending data back and forth using the SDA line. They take turns sending bits (0s and 1s) to each other.</p> </li> <li> <p>Synchronization: The SCL line is used to keep everything in sync. The clock pulses on the SCL line make sure both devices know when to send and read bits.</p> </li> <li> <p>Stop Signal: When they're done talking, the master sends a stop signal on the SDA line to end the conversation.</p> </li> </ol> <p>Think of I2C like passing a ball back and forth in a game. The start signal is like saying, \"Let's play!\" Addressing is like picking who you want to pass the ball to. Data transfer is like the actual passing of the ball, and the clock (SCL) keeps everyone in the game. When you're done, you say, \"Game over\" with the stop signal.</p> <p>SDA and SCL Pins in I2C Protocol:</p> <p>Now, let's talk about the two important pins in the I2C protocol: SDA (Serial Data) and SCL (Serial Clock). These pins are like the wires that the devices use to talk to each other.</p> <ul> <li> <p>SDA (Serial Data): This is the pin where data is sent between devices on the I2C bus. It's like a communication line where information is exchanged.</p> </li> <li> <p>SCL (Serial Clock): SCL is like the conductor of an orchestra. It controls the timing of data transmission. It sends clock pulses to synchronize when data is sent and received. Think of it as the beat of a song that helps everyone stay in rhythm.</p> </li> </ul> <p>So, when devices want to talk to each other using I2C, they use these two pins to send and receive data while following the rules of the I2C protocol. It's a neat way for devices to communicate with just a couple of wires!</p>"},{"location":"projects/oled_display/reaction_game/","title":"Reaction game","text":"<p>Now lets build a small gamge * The game is a two player reaction game, whoever presses the button first and faster wins the game </p>"},{"location":"projects/oled_display/reaction_game/#hooking-up-the-oled-display","title":"Hooking up the OLED display","text":"<ul> <li>The OLED display uses the i2c protocol that was just described previously</li> <li>The raspberry pi pico has a few pins that support the i2c protocol </li> <li>We are going to use the pins numbered 1 and 2 , these are internally GPIO 0 and 1 </li> <li>So now connect the raspberry pi pico to the ground and the 5v pins </li> <li>Now the next step is to use the jumper cables to connect the Pico pins 1 and 2 to the OLED display </li> </ul>"},{"location":"projects/oled_display/reaction_game/#writing-the-code","title":"Writing the code","text":"<ul> <li>Before we write any code we need some special code that we need to download a library <ul> <li>Click on the Tools window in the Thonny IDE </li> <li>Now Click on Manage Packages</li> <li>Now in the dialog box search for <code>micropython-ssd1306</code> and then once you find this click on install </li> </ul> </li> </ul>"},{"location":"projects/oled_display/reaction_game/#now-lets-try-to-print-something-on-the-oled-display","title":"Now lets try to print something  on the OLED display","text":"<pre><code>from machine import Pin, I2C\nfrom ssd1306 import SSD1306_I2C\nimport time\n</code></pre> <ul> <li>Let's pull in the libraries that we will be needing </li> </ul> <pre><code>WIDTH =128 \nHEIGHT= 64\ni2c=I2C(0,scl=Pin(1),sda=Pin(0),freq=200000)\noled = SSD1306_I2C(WIDTH,HEIGHT,i2c)\n</code></pre> <ul> <li>The next step is to start by writing the text on the OLED display, turn on the LEDs in that particular pattern that will write the text</li> </ul> <pre><code>while True:\n    oled.fill(0)\n    oled.text(\"Hello Python\", 0, 0)\n    oled.show()\n</code></pre> <ul> <li>Now let's try changing the co-ordinates of the text to print , try seeing how the text changes </li> </ul>"},{"location":"projects/oled_display/reaction_game/#building-the-reaction-game","title":"Building the reaction game","text":"<ul> <li>We earlier learnt how to use a pushbutton, Now Let's combine that with the knowledge of the OLED display to build a small game </li> <li>Our game will have 2 buttons , one for player 1 , other for player 2 . Whoever presses the button first, wins the game.</li> </ul>"},{"location":"projects/piezo_buzzer/how_sound_works/","title":"What is sound","text":""},{"location":"projects/piezo_buzzer/how_sound_works/#waves","title":"Waves","text":"<p>Waves are a bit like ripples in a pond when you throw a stone into the water. They're a way that energy travels from one place to another. But instead of water, waves can happen in lots of different things, like air, water, or even light!</p> <p>Imagine you're playing with a jump rope. When you wiggle one end up and down, you make a wave travel along the rope. This wave moves from one end to the other. Waves in nature work similarly, except they don't need a rope \u2013 they can move through different materials.</p>"},{"location":"projects/piezo_buzzer/how_sound_works/#wavelength","title":"Wavelength","text":"<p>Now, let's talk about wavelength. It's like measuring the distance between the ripples in the pond or the bumps in the jump rope. Imagine you're making waves in the water with your hand. If you make big waves, the distance between each wave (the wavelength) is longer. If you make tiny ripples, the wavelength is shorter.</p> <p>In other words, wavelength is how long one wave is from start to finish. It's like measuring the length of one cycle of the wave.</p>"},{"location":"projects/piezo_buzzer/how_sound_works/#frequency","title":"Frequency","text":"<p>Frequency is how often the waves go up and down. If you keep wiggling the jump rope up and down quickly, you create high-frequency waves. But if you do it slowly, you make low-frequency waves. So, frequency tells us how many waves pass by a certain point in one second.</p> <p>High-frequency waves have short wavelengths, and low-frequency waves have long wavelengths. It's like when you listen to music: high notes have high-frequency waves, and low notes have low-frequency waves.</p>"},{"location":"projects/piezo_buzzer/how_sound_works/#sound-and-how-it-works","title":"Sound and How It Works","text":"<p>Now, let's talk about sound! Sound is a type of wave that travels through the air, and it's how we hear things.</p> <p>When you talk, play music, or make any noise, you create sound waves. These waves are like tiny vibrations in the air. They move through the air and reach your ears. Inside your ears, there are special parts that can feel these vibrations and turn them into the sounds you hear.</p> <p>The pitch of a sound, whether it's high or low, depends on the frequency of the sound waves. High-pitched sounds have high-frequency waves, and low-pitched sounds have low-frequency waves.</p> <p>The loudness of a sound depends on how big the waves are. Bigger waves mean a louder sound, while smaller waves make a quieter sound.</p> <p>So, when you're listening to your favorite music, you're actually hearing a combination of different sound waves with various frequencies and amplitudes (the size of the waves). All these waves mix together to create the songs and sounds you love.</p> <p>Remember, waves are everywhere in nature, from the ocean to the air you breathe, and they help us understand how things like sound work!</p>"},{"location":"projects/piezo_buzzer/pieze_buzzer/","title":"How does a piezo buzzer work","text":"<p>A piezo buzzer is a tiny sound-making device, like a little musical instrument. Here's how it works:</p>"},{"location":"projects/piezo_buzzer/pieze_buzzer/#magic-crystal","title":"Magic Crystal:","text":"<p>Inside the buzzer, there's a special crystal that can change its shape when you give it electricity. Think of it like a crystal that can grow and shrink really, really fast.</p>"},{"location":"projects/piezo_buzzer/pieze_buzzer/#shaking-and-vibrating","title":"Shaking and Vibrating:","text":"<p>When you connect the buzzer to batteries or a circuit and turn it on, it's like waking up the crystal. It starts to shake and vibrate super, super fast, like a leaf in the wind.</p>"},{"location":"projects/piezo_buzzer/pieze_buzzer/#making-sound","title":"Making Sound:","text":"<p>These super-fast shakes create wiggles in the air around the buzzer. These wiggles are like invisible waves, just like when you throw a pebble into a pond, and it makes ripples. These invisible waves are actually sound!</p>"},{"location":"projects/piezo_buzzer/pieze_buzzer/#hearing-the-sound","title":"Hearing the Sound:","text":"<p>When these invisible sound waves reach your ears, they make your eardrums wobble a little bit. Your brain is like a super-smart detective that can understand these wobbles and tells you that you're hearing a sound.</p> <p>So, the piezo buzzer is like a little magician. It uses a special crystal to shake and make invisible sound waves, and your ears and brain work together to turn those invisible waves into the sounds you hear. It's like having a tiny musical instrument that can play different tunes when you tell it to!</p> <pre><code>from machine import Pin, PWM\nfrom utime import sleep\n\nanalog_value = machine.ADC(28)\nbuzzer = PWM(Pin(15))\n\nwhile True:\n    value = analog_value.read_u16()\n    buzzer.freq(int(value/14.0))\n    print(value)\n    buzzer.duty_u16(1000)\n    sleep(0.1)\n    buzzer.duty_u16(0)\n</code></pre>"},{"location":"projects/rgb_led/custom_mix/","title":"Color Mixing Fun","text":"<p>Now lets have some fun by combining the values </p> <p>Here's how you can connect the components:</p> <ul> <li>Connect the common anode of the RGB LED to the 3.3V pin on the Raspberry Pi Pico.</li> <li>Connect each of the color pins (red, green, and blue) of the RGB LED to separate PWM pins on the Raspberry Pi Pico. In the provided code, the connections are as follows:</li> <li>Red to GPIO pin 2</li> <li>Green to GPIO pin 3</li> <li>Blue to GPIO pin 4</li> <li>Connect the potentiometer as follows:</li> <li>Connect one end of the potentiometer to 3.3V on the Raspberry Pi Pico.</li> <li>Connect the other end of the potentiometer to the ground (GND) on the Raspberry Pi Pico.</li> <li>Connect the middle pin (the wiper) of the potentiometer to GPIO pin 28 (analog input).</li> <li>Code Explanation: Now, let's break down the Python code step by step:</li> </ul> <p>Import necessary libraries:</p> <pre><code>from machine import Pin, PWM\nimport utime\nimport random\n</code></pre> <ul> <li>Create PWM objects for controlling the RGB LED:</li> </ul> <pre><code>Led_R = PWM(Pin(2))\nLed_G = PWM(Pin(3))\nLed_B = PWM(Pin(4))\n</code></pre> <p>This code initializes PWM objects for the red, green, and blue pins of the RGB LED.</p> <p>Initialize an ADC (Analog-to-Digital Converter) object for reading the potentiometer:</p> <pre><code>analog_value = machine.ADC(28)\n</code></pre> <p>This sets up an ADC to read analog values from pin 28.</p> <p>Set the PWM frequency for each color:</p> <pre><code>Led_R.freq(2000)\nLed_G.freq(2000)\nLed_B.freq(2000)\n</code></pre> <p>This code sets the PWM frequency for the RGB LED to 2000 Hz.</p> <p>Main loop:</p> <pre><code>while True:\n</code></pre> <p>The following code inside the loop repeats indefinitely:</p> <p>Read the analog value from the potentiometer:</p> <pre><code>value = analog_value.read_u16()\n</code></pre> <p>Assign the same value to R, G, and B, effectively making them all the same, which results in a grayscale color:</p> <pre><code>R = value\nG = value\nB = value\n</code></pre> <p>Print the current values of R, G, and B:</p> <pre><code>print(R, G, B)\n</code></pre> <p>Set the PWM duty cycle for each color based on the values of R, G, and B:</p> <pre><code>Led_R.duty_u16(R)\nLed_G.duty_u16(G)\nLed_B.duty_u16(B)\n</code></pre> <p>Pause for 100 milliseconds before repeating the loop:</p> <pre><code>utime.sleep_ms(100)\n</code></pre> <p>In this code, the potentiometer's position controls the intensity of all three RGB colors simultaneously, creating different shades of grayscale. You can turn the potentiometer to mix the colors and create various shades of white, black, and gray on the RGB LED.</p>"},{"location":"projects/rgb_led/one_led_at_a_time/","title":"One led at a time","text":""},{"location":"projects/rgb_led/one_led_at_a_time/#title-the-magic-of-rgb-leds","title":"Title: The Magic of RGB LEDs","text":"<p>An RGB LED is like a colorful mini-light that can shine in many different colors. It's like having a tiny rainbow in your electronics!</p> <p>What's RGB?</p> <p>RGB stands for Red, Green, and Blue. These are the primary colors of light. An RGB LED has three tiny lights inside it \u2013 one for red, one for green, and one for blue.</p> <p>How does it make colors?</p> <p>By mixing these three colors together, you can create almost any color you can think of! For example, when you turn on the red and green lights, it makes yellow. Turn on the blue and green lights, and you get turquoise!</p> <p>Controlling the Colors</p> <p>To make the RGB LED show the color you want, you can use your Raspberry Pi Pico to send it special instructions. You can say, \"Hey, shine red!\" or \"Show me some purple!\"</p> <p>Fun with RGB LEDs</p> <p>RGB LEDs are used in lots of fun things. You can make a mood lamp that changes colors, create colorful displays, or even build a mini traffic light with red, green, and yellow colors.</p> <p>Why is it awesome?</p> <p>RGB LEDs let you bring a burst of color to your projects. They're like having a magic paintbrush in the world of electronics, letting you mix and match colors to create something truly dazzling!</p> <p>Let's make the LED Work</p> <ul> <li>The LED we have in the box has a common positive terminal , it means that all the three LEDs connect to one positive terminal </li> </ul>"},{"location":"projects/rgb_led/one_led_at_a_time/#what-is-a-common-anode-rgb-led","title":"What is a Common Anode RGB LED?","text":"<p>Imagine you have a special light that can shine in three different colors: red, green, and blue. This light is called an RGB LED. RGB stands for \"Red, Green, Blue.\"</p> <p>Now, a common anode RGB LED is a specific type of RGB LED. An \"anode\" is like the positive side of a battery. In this type of LED, the anode of all three color parts (red, green, and blue) are connected together, which makes it \"common.\" This means that when you want to turn on a specific color, you send a signal to the common anode, and then you connect the individual color pins (red, green, and blue) to the ground (negative) to make that color light up. So, it's like you have a shared positive connection and you choose which color you want by turning on the corresponding color pins.</p>"},{"location":"projects/rgb_led/one_led_at_a_time/#connecting-a-common-anode-rgb-led-to-raspberry-pi-pico","title":"Connecting a Common Anode RGB LED to Raspberry Pi Pico","text":"<p>To connect a common anode RGB LED to a Raspberry Pi Pico, you'll need the following components:</p> <p>Here's how you can connect it:</p> <p>Identify the pins: Your RGB LED should have four pins - one for common anode (usually the longest pin) and one for each color (red, green, and blue).</p> <p>Connect common anode: Connect the common anode (longest pin) to the 3.3V pin on the Raspberry Pi Pico. This will provide power to the LED.</p> <p>Connect color pins: Connect each of the color pins (red, green, and blue) to separate GPIO pins on the Raspberry Pi Pico. For example:</p> <p>Red to GPIO pin 17 Green to GPIO pin 18 Blue to GPIO pin 19 Add resistors: Place a resistor (220-330 ohms) between the anode and the 3.3v line. Connect one end of each resistor to the respective color pin and the other end to the ground (GND) pin on the Raspberry Pi Pico. This will limit the current flowing through the LED, protecting it.</p> <p>Ground connection: Connect a jumper wire from the Raspberry Pi Pico's GND (ground) pin to the breadboard's ground rail if you're using one. If not, connect it directly to the LED's common anode.</p> <p>Now, you can write Python code to control the RGB LED using the GP IO pins you've connected to the individual colors. For example, to turn the LED red, you'd set the red GPIO pin to HIGH and the green and blue pins to LOW.</p>"},{"location":"projects/ultrasonic_sensor/measuring_distance/","title":"Measuring distance","text":""},{"location":"projects/ultrasonic_sensor/measuring_distance/#calculating-distance-using-sound","title":"Calculating Distance using sound","text":"<p>To calculate distance using ultrasound waves, we can use the speed formula:</p> <pre><code>Speed = Distance / Time\n</code></pre> <p>Speed is how fast something travels (in this case, the speed of sound). Distance is how far an object is from the source of the sound. Time is how long it takes for the sound to travel to the object and back. When we know the speed of sound, which is approximately 343 meters per second (in dry air at 20\u00b0C or 68\u00b0F), and we measure the time it takes for an ultrasound wave to bounce off an object and return, we can rearrange the formula to calculate distance:</p> <pre><code>Distance = (Speed x Time) / 2\n</code></pre> <p>Dividing by 2 is important because the sound wave travels to the object and then back, so we need to account for the round trip.</p>"},{"location":"projects/ultrasonic_sensor/measuring_distance/#how-bats-see-with-ultrasound","title":"How Bats \"See\" with Ultrasound:","text":"<ul> <li> <p>Bats are fascinating animals that use ultrasound to \"see\" in the dark. They emit high-pitched ultrasound waves, which are too high for our ears to hear. These waves bounce off objects, like insects or obstacles in their path, and return to the bat.</p> </li> <li> <p>Bats have specialized ears that can detect these returning echoes. By measuring the time it takes for the echoes to come back and the direction they come from, bats can create a mental map of their surroundings. They essentially create a picture of the world through sound, much like how we see with our eyes.</p> </li> <li> <p>This ability to use ultrasound for navigation and hunting is called echolocation, and it allows bats to fly and hunt in complete darkness, even in places with lots of obstacles.</p> </li> </ul> <p>In summary, the speed of sound can be used to calculate distance by measuring the time it takes for sound waves to travel to an object and back. Bats have evolved to use this principle to their advantage, emitting ultrasound waves and listening for the returning echoes to \"see\" and navigate their surroundings. It's a remarkable example of how animals have adapted to their environments and developed unique senses for survival.</p>"},{"location":"projects/ultrasonic_sensor/ulltrasonic_sensor/","title":"Ulltrasonic sensor","text":""},{"location":"projects/ultrasonic_sensor/ulltrasonic_sensor/#how-ultrasonic-sensors-work","title":"How Ultrasonic Sensors Work","text":"<p>You know how bats use squeaky sound waves to figure out where things are? Ultrasonic sensors work in a similar way!</p> <p>An ultrasonic sensor has two important parts:</p> <ul> <li>An ultrasonic transmitter</li> <li>An ultrasonic receiver</li> <li> <p>The transmitter sends out a very high frequency sound, called ultrasound, that humans can't hear. When the ultrasound hits an object, it bounces back to the sensor.</p> </li> <li> <p>The receiver listens for this reflected sound. By measuring how long it takes for the ultrasound to bounce back, the sensor can calculate how far away the object is!</p> </li> <li> <p>It's like how a bat sends out a squeak and listens for an echo to hunt insects in the dark. But ultrasonic sensors use super high-pitched sounds instead of bat squeaks.</p> </li> </ul> <p>So that's the basic idea - ultrasound is sent out and its echo is measured to detect objects and calculate distance. Pretty cool how sound can be used to \"see\" things just like bats do!</p>"},{"location":"projects/ultrasonic_sensor/ulltrasonic_sensor/#the-hcsr04-ultrasonic-sensor","title":"The HCSR04 ultrasonic sensor","text":"<p>If you look closely at the HC-SR04 sensor you will see that it has 2 pins apart from vdd and ground.</p> <ul> <li> <p>The trig pin is the transmitter. We send a short pulse on this pin to trigger the sensor to send out an ultrasound burst.</p> </li> <li> <p>The echo pin is the receiver. It listens for the echo of the ultrasound coming back.</p> </li> </ul>"},{"location":"projects/ultrasonic_sensor/ulltrasonic_sensor/#writing-the-code","title":"Writing the code","text":"<ul> <li>Let's import the libraries that we will need</li> </ul> <pre><code>from machine import Pin\nimport utime\n</code></pre> <ul> <li>Next step is to setup the Pins , remember the trigger or the trig pin is the output pin but the echo pin which is going to read the reflected signal is the input pin </li> </ul> <pre><code>trigger = Pin(3, Pin.OUT)\necho = Pin(2, Pin.IN)\n</code></pre> <ul> <li>Now , this is the tricky part , we start by turning on the trigger , first we set the trigger to low(turn it off), then we set it high(turn it on) , sleep for 5 micro-secs and then again set it low(turn it off), This way we send out the signal which we will then receive using the echo Pin</li> </ul> <pre><code>while True:\n   trigger.low()\n   utime.sleep_us(2)\n   trigger.high()\n   utime.sleep_us(5)\n   trigger.low()\n</code></pre> <p>Now we check the echo Value , if the value remains 0 that means the signal was not yet received , we record the value in microseconds for the time when the signal is turned off  The second part is when the value becomes 1 which means the part where the sigtnal is received </p> <pre><code>   while echo.value() == 0:\n       signaloff = utime.ticks_us()\n   while echo.value() == 1:\n       signalon = utime.ticks_us()\n   timepassed = signalon - signaloff\n</code></pre> <pre><code>   distance = (timepassed * 0.0343) / 2\n   print(\"The distance from object is \",distance,\"cm\")\n   utime.sleep(1)\n\n</code></pre>"}]}